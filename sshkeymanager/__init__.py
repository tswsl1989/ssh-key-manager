#!/usr/bin/env python3

import os
import logging

log = logging.getLogger(__name__)


def get_files(dirname, fileext=".pub"):
    """
    Generate dictionary of files in base directory with matching extension

    Returns a dictionary keyed by the file stem, with path and file name as the value
    """

    kl = {}
    try:
        for f in os.listdir(dirname):
            name, ext = os.path.splitext(f)
            if not ext == fileext:
                # Ignore anything not named appropriately
                continue
            kl[name] = os.path.join(dirname, f)
    except FileNotFoundError:
        # If directory doesn't exist, return cleanly
        return {}

    # Sort and return
    return {a: kl[a] for a in sorted(kl.keys())}


def build_key_list(basedir, hostname=None):
    """
    Build the key/option file dictionary, using host specific directory to override generic options

    Returned dictionary is k[stem] = (key file, option file) where,
        stem is the file stem used for matching
        key file is the path to the public key (.pub) file
        option file is None or the path to the option (.opt) file that will be prefixed to the key
    """

    kl = {}
    ol = {}
    for k, b in get_files(basedir, ".pub").items():
        kl[k] = b
        log.info(f"Key found: {k}:{b}")

    for o, b in get_files(basedir, ".opt").items():
        if o not in kl:
            continue
        ol[o] = b
        log.info(f"Option file found: {o}:{b}")

    if hostname is not None:
        # If hostname specific directory exists, override base directory
        hostdir = os.path.join(basedir, hostname)
        for k, b in get_files(hostdir, ".pub").items():
            if k in kl:
                log.info(f"Override key: {k}:{b}")
                kl[k] = b
            else:
                log.info(f"Key found: {k}:{b}")
                kl[k] = b

        for o, b in get_files(hostdir, ".opt").items():
            if o in ol:
                log.info(f"Override options: {o}:{b}")
                ol[o] = b
            elif o in kl:
                log.info(f"Option file found: {o}:{b}")
                ol[o] = b
            else:
                # o not in ol or kl
                log.warning(f"Option file found for {o}, but no key file available")

    ks = {}
    for k in sorted(kl.keys()):
        if k in ol:
            ks[k] = (kl[k], ol[k])
        else:
            ks[k] = (kl[k], None)

    return ks


def make_authorized_key_files(keylist, outfile):
    """
    Use the dictionary generated by build_key_list() and write out an authorized key file
    """

    af = ""
    with open(outfile, "w") as out:
        for k in keylist:
            kfn = keylist[k][0]
            ofn = keylist[k][1]

            keys = [""]
            with open(kfn, "r") as kf:
                keys = [x.strip() for x in kf.readlines()]

            prefixes = None
            if ofn:
                with open(ofn, "r") as cf:
                    prefixes = [x.strip() + " " for x in cf.readlines()]
            else:
                prefixes = [""] * len(keys)

            for prefix, key in zip(prefixes, keys):
                out.write(prefix + key + "\n")
